#!/bin/bash

# common print functions

docker_info() {
  # param 1 is $1 - docker info

  echo "
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !!                                                                                                                                           !!
  !!  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  !!
  !!  !!                                                                                                                                   !!  !!
  !!  !!                                                                                                                                   !!  !!";

  printf "  !!  !!    %-126s !!  !!" "$1";

  echo "
  !!  !!                                                                                                                                   !!  !!
  !!  !!                                                                                                                                   !!  !!
  !!  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  !!
  !!                                                                                                                                           !!
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  ";
}

part_info() {
  # param 1 is $1 - part number
  # param 2 is $2 - part functionality

  echo "
  ***********************************************************************************************************************************************
  ***********************************************************************************************************************************************
  ***********************************************************************************************************************************************
  ***********************************************************************************************************************************************
  ***********************************************************************************************************************************************"

  # >> $# << - number of arguments
  # >> -z "$2" << - 2nd argument exist
  if [[ $# -eq 2 && !(-z "$2") ]]; then
    printf "  ********* %-123s *********\n" "";
    printf "  *********       %-117s *********\n" "$1";
    printf "  ********* %-123s *********\n" "";
    printf "  *********             %-111s *********\n" "$2";
    printf "  ********* %-123s *********" "";
  else 
    echo "
    $1
    ";
  fi

  echo "
  ***********************************************************************************************************************************************
  ***********************************************************************************************************************************************
  ***********************************************************************************************************************************************
  ***********************************************************************************************************************************************
  ***********************************************************************************************************************************************
  "
}

section_info() {
  # param 1 is $1 - section title

  printf "\n
------------------------------------------------------------------------------------------------------------------------
========================================================================================================================
\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
	$1
/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\\
========================================================================================================================
------------------------------------------------------------------------------------------------------------------------
"
}

command_info() {
  # param 1 is $1 - command name
  
  printf "\n   $1\n"
}

printIsBoolean() {
  # $1 - variable name
  # $2 - variable value
  if [[ "$2" == true ]]; then
      echo "$1? truthy ($1: $2)"
    elif [[ "$2" == false ]]; then
      echo "$1? falsy ($1: $2)"
    else
      echo "$1? neither truthy or falsy ($1: $2)"
  fi
}

# https://stackoverflow.com/questions/5195607/checking-bash-exit-status-of-several-commands-efficiently

printErrorCode() {
  local executedCommand statusCode printAlways;
  local "${@}";

  [[ statusCode -eq 0 ]] && local codeName="Status code" || local codeName="Error code";
  [[ !(-z "$executedCommand") && "$executedCommand" != "" ]] && local fromCommandName=" from command \"$executedCommand\"" || local fromCommandName="";

  if [[ $printAlways == true || $statusCode -ne 0 ]]; then
    echo "$codeName \"$statusCode\"$fromCommandName." >&2;
  fi

  return $statusCode;
}

execPrintIfError() {
  local executedCommand printAlways;
  local "${@}";

  $executedCommand;

  local statusCode=$?;

  printErrorCode \
    executedCommand="$executedCommand" \
    statusCode=$statusCode \
    printAlways="$printAlways";

  return $statusCode;
}

unhandledLogicError() {
  local description;
  local "${@}";

  if [[ "$description" != "" ]]; then
    section_info "Unhandled logic error - $description"
  else
    section_info "Unhandled logic error"
  fi

  command_info "This option should not be reached - ever."
}